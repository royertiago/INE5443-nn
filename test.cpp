namespace command_line {
    const char help_message[] =
" [options] image...\n"
"Classifies each of the images given in the command line\n"
"using the neural network generated by the accompanying 'train' program.\n"
"\n"
"Options:\n"
"--nn <file>\n"
"--neural-net <file>\n"
"    Reads the neural network from <file>.\n"
"    Default: neural.net.\n"
"\n"
"--pretty <file>\n"
"    Uses the given auxiliary file to pretty print the results.\n"
"    Default: neural.data.\n"
"\n"
"--verbose"
"    Shows all the classification inputs together with their scores.\n"
"    Default: just print the best fit.\n"
"\n"
"--help"
"    Show this text and quit.\n"
;
} // namespace command_line

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <fann.h>
#include <fann_cpp.h>
#include "cmdline/args.hpp"
#include "read_img.h"

namespace command_line {
    std::string neural_net = "neural.net";
    std::string print_data = "neural.data";

    /* File names given in command line that needs to be processed.
     */
    std::vector< std::string > input_file_names;

    /* File names used for pretty printing.
     */
    std::vector< std::string > output_file_names;

    bool verbose = false;

    void parse( cmdline::args && args ) {
        while( args.size() > 0 ) {
            std::string arg = args.next();
            if( arg == "-nn" || arg == "--neural-net" ) {
                neural_net = args.next();
                continue;
            }
            if( arg == "--pretty" ) {
                print_data = args.next();
                continue;
            }
            if( arg == "--verbose" ) {
                verbose = true;
                continue;
            }
            if( arg == "--help" ) {
                std::cout << args.program_name() << help_message;
                std::exit(0);
            }
            input_file_names.push_back( arg );
        }

        std::ifstream print( print_data );
        while( print ) {
            std::string name;
            std::getline( print, name );
            output_file_names.push_back( name );
        }
    }
} // namespace command_line

int main( int argc, char ** argv ) {
    command_line::parse( cmdline::args(argc, argv) );

    FANN::neural_net nn;
    nn.create_from_file( command_line::neural_net );

    for( auto file : command_line::input_file_names ) {
        auto vec = read_pixels( file );

        if( command_line::verbose )
            std::cout << "Classifying file " << file << std::endl;

        auto result = nn.run( vec.data() );
        int index_max = 0;
        for( int i = 0; i < nn.get_num_output(); i++ ) {
            if( command_line::verbose )
                std::cout << command_line::output_file_names[i]
                    << " " << result[i] << std::endl;
            if( result[i] > result[index_max] )
                index_max = i;
        }

        if( command_line::verbose )
            std::cout << "Best match: ";

        std::cout << command_line::output_file_names[index_max] << std::endl;
    }
    return 0;
}
